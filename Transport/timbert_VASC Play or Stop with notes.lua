-- @description VASC Play/Stop with notes
-- @author Thomas Imbert
-- @version 1.1
-- @link GitHub repository https://github.com/ThomasImbert/REAPER-ReaScripts
-- @about Play/Stop command that pastes stored VASC Guide info in selected item.
-- @changelog 
--   # Added Auto Extend Guide Stop

-- #local declarations#

-- Record state
local record_command_state = reaper.GetToggleCommandState(1013) 
-- Get computer specific ID of "SWS: Save Selected track(s) selected item(s), slot 1"
local save_item_slot_1_ID = reaper.NamedCommandLookup("_SWS_SAVESELITEMS1") 
-- Get computer specific ID of "SWS: Restore Selected track(s) selected item(s), slot 1"
local restore_item_slot_1_ID = reaper.NamedCommandLookup("_SWS_RESTSELITEMS1") 
-- Get computer specific ID of "_SWS_SAVESEL"
local sws_saveCurrentTrackSelection = reaper.NamedCommandLookup("_SWS_SAVESEL") 
-- Get computer specific ID of "_SWS_RESTORESEL"
local sws_restoreTrackSelection = reaper.NamedCommandLookup("_SWS_RESTORESEL")  
-- Get computer specific ID of "_XENAKIOS_SELITEMSUNDEDCURSELTX"
local sws_selectItems_editCursor_onSelectedTracks = reaper.NamedCommandLookup("_XENAKIOS_SELITEMSUNDEDCURSELTX") 
-- Get computer specific ID of "_SWS_SAVEALLSELITEMS1"
local sws_saveSelectedItems = reaper.NamedCommandLookup("_SWS_SAVEALLSELITEMS1") 
-- Get computer specific ID of "_SWS_RESTALLSELITEMS1"
local sws_restoreSelectedItems = reaper.NamedCommandLookup("_SWS_RESTALLSELITEMS1") 
-- Guide item present
local isGuideItemPresent = true

reaper.PreventUIRefresh(1)

reaper.Undo_BeginBlock() -- Begining of the undo block. Leave it at the top of your main function.

function storeNotes()
	if reaper.CountSelectedMediaItems( 0 ) > 0 then -- Check that an item is selected
		local selItem = reaper.GetSelectedMediaItem( 0 , 0 )
		local itemNotes = ""
		local boolean, itemNotes = reaper.GetSetMediaItemInfo_String(selItem , "P_NOTES", itemNotes, false)
		reaper.DeleteExtState( "vascReaper", "vascNotes", false )
		reaper.SetProjExtState( 0, "vascReaper", "vascNotes", tostring(itemNotes)) 
	end 
end

function pasteNotes()     
	if reaper.CountSelectedMediaItems( 0 ) > 0 then -- Check that an item is selected
		local selItem = reaper.GetSelectedMediaItem( 0 , 0 )
		retval, itemNotes = reaper.GetProjExtState( 0, "vascReaper", "vascNotes")
		reaper.GetSetMediaItemInfo_String(selItem , "P_NOTES", itemNotes, true)
	end
end

-- This script was generated by Lokasenna_Select tracks by name.lua
local settings = {
  matchmultiple = false,
  search = "GUIDE",
  selchildren = false,
  selparents = false,
  selsiblings = false,
  matchonlytop = false,
}


local info = debug.getinfo(1,'S');
script_path = info.source:match[[^@?(.*[\/])[^\/]-$]]
local script_filename = ({reaper.get_action_context()})[2]:match("([^/\\]+)$")

-------- Search Functions ----------

-- Returns true if the individual words of str_b all appear in str_a
local function fuzzy_match(str_a, str_b)

    if not (str_a and str_b) then return end
    str_a, str_b = string.lower(tostring(str_a)), string.lower(tostring(str_b))

    --Msg("\nfuzzy match, looking for:\n\t" .. str_b .. "\nin:\n\t" .. str_a .. "\n")

    for word in string.gmatch(str_b, "[^%s]+") do
	   --Msg( tostring(word) .. ": " .. tostring( string.match(str_a, word) ) )
	   if not string.match(str_a, word) then return end
    end
    return true
end

local function is_match(str, tr_name, tr_idx)
    if str:sub(1, 1) == "#" then
	   -- Force an integer until/unless I come up with some sort of multiple track syntax
	   str = tonumber(str:sub(2, -1))
	   return str and (math.floor( tonumber(str) ) == tr_idx)

    elseif tostring(str) then
	   return fuzzy_match(tr_name, tostring(str))
    end
end

local function merge_tables(...)

    local tables = {...}

    local ret = {}
    for i = #tables, 1, -1 do
	   if tables[i] then
		  for k, v in pairs(tables[i]) do
			 if v then ret[k] = v end
		  end
	   end
    end

    return ret

end

local function get_tracks_to_sel(settings)
    --[[
	   settings = {
		  search = str,

		  matchmultiple = bool,
		  matchonlytop = bool,
		  selchildren = bool,
		  selparents = bool,

		  mcp = bool,
		  tcp = bool
	   }
    ]]--
    local matches = {}

    -- Find all matches
    for i = 1, reaper.CountTracks(0) do

	   local tr = reaper.GetTrack(0, i - 1)
	   local _, name = reaper.GetTrackName(tr, "")
	   local idx = math.floor( reaper.GetMediaTrackInfo_Value(tr, "IP_TRACKNUMBER") )
	   local ischild = reaper.GetTrackDepth(tr) > 0

	   if is_match(settings.search, name, idx) and not (ischild and settings.matchonlytop) then
		  matches[idx] = true
		  if not settings.matchmultiple then break end
	   end
    end
    -- Hacky way to check if length of a hash table == 0
    for k in pairs(matches) do
	   if not k then return {} end
    end

    return merge_tables(matches)
end

local function set_selection(tracks, settings)
    if not tracks then return end
    --if not tracks or #tracks == 0 then return end

    for i = 1, reaper.CountTracks(0) do

	   local tr = reaper.GetTrack(0, i - 1)
	   local keep = settings.add_selection and reaper.IsTrackSelected(tr)
	   reaper.SetTrackSelected(tr, not not (tracks[i] or keep))
    end
    reaper.TrackList_AdjustWindows(false)
end

function selectGuide()
	local tracks = get_tracks_to_sel(settings)
	if tracks then
		set_selection( tracks, settings )
		return
	end
end
-- End of the Lokasenna_Select tracks by name.lua script


function main()     
	-- Transport: Play/Stop
	reaper.Main_OnCommand(40044, 0)  
	if reaper.GetPlayStateEx( 0 ) == 2 then 
		reaper.SetProjExtState( 0, "VASC_Record", "ExtendGuide", 0 ) 
	end
	-- Save current track selection
	reaper.Main_OnCommand(sws_saveCurrentTrackSelection, 0)
	-- Save selected item(s)
	reaper.Main_OnCommand(sws_saveSelectedItems, 0)
	-- Item: Unselect (clear selection of all items)
	reaper.Main_OnCommand(40289, 0)
	-- Select Guide track exclusively
	selectGuide()
	-- _XENAKIOS_SELITEMSUNDEDCURSELTX
	reaper.Main_OnCommand(sws_selectItems_editCursor_onSelectedTracks, 0)
	if reaper.CountSelectedMediaItems( 0 ) ~= 0 then
		-- timbert_Store selected item notes.lua 
		storeNotes()
		-- SWS: Save Selected track(s) selected item(s), slot 1
		reaper.Main_OnCommand(save_item_slot_1_ID, 0)
		-- _SWS_RESTORESEL
		reaper.Main_OnCommand(sws_restoreTrackSelection, 0)
		-- _SWS_RESTALLSELITEMS1
		reaper.Main_OnCommand(sws_restoreSelectedItems, 0)
		-- Paste to selected item notes
		pasteNotes()
	end
end

-- If transport is playing
if  (reaper.GetToggleCommandState(1007) ~= false and record_command_state ~= false) then
return main() end -- call main function

-- If transport is stopped
if reaper.GetToggleCommandState(1007) ~= true then
return reaper.Main_OnCommand(1007, 0) end -- Tranport: Play

-- If Record is off
if record_command_state ~= true then 
return reaper.Main_OnCommand(40044, 0) end -- Tranport: Play/ Stop

reaper.UpdateArrange()

reaper.Undo_EndBlock("VASC Play/Stop with notes", -1 ) -- End of the undo block. Leave it at the bottom of your main function.

reaper.PreventUIRefresh(-1)